version: "3"

services:
  kontext:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.kontext
    # since we are using shared volume with nginx
    # in case different version of kontext is used
    # we need to copy files into the shared volume first
    #
    # also we give anonymous user permission to access
    # example corpus susanne when using `default_auth` plugin
    command: >
      bash -c "cp -r /opt/kontext/public/files/* /opt/kontext/public/share &&
               python3 lib/plugins/default_auth/scripts/usercorp.py 1 add susanne &&
               python3 public/app.py --address 0.0.0.0 --port 8080 --workers 2"
    environment:
      - STATUS_SERVICE_URL=
    volumes:
      - ${KONTEXT_CONFIG}:/opt/kontext/conf/config.xml
      - files:/opt/kontext/public/share
      - corpora-data:/var/lib/manatee
      - corpora-cache:/var/local/corpora
    networks:
      - databases
      - kontext
    depends_on:
      - redis

  rq-scheduler:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.rqscheduler
    command: rqscheduler --host kontext_redis_1 --db 2 -i 10
    networks:
      - databases
    depends_on:
      - redis

  rq-worker:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.rqworker
    volumes:
      - ${KONTEXT_CONFIG}:/opt/kontext/conf/config.xml
      - corpora-data:/var/lib/manatee
      - corpora-cache:/var/local/corpora
    networks:
      - databases
    depends_on:
      - redis
      - kontext

  redis:
    image: redis:latest
    networks:
      - databases
    ports:
      - "16379:6379"
    volumes:
      - redisdata:/data

  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./scripts/install/conf/docker/nginx.conf:/etc/nginx/conf.d/default.conf
      - files:/opt/kontext/public/files
    networks:
      - kontext
    depends_on:
      - kontext

volumes:
  files: {}
  corpora-data: {}
  corpora-cache: {}
  redisdata: {}

networks:
  databases: {}
  kontext: {}