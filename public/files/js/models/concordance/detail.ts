/*
 * Copyright (c) 2016 Charles University, Faculty of Arts,
 *                    Institute of the Czech National Corpus
 * Copyright (c) 2016 Tomas Machalek <tomas.machalek@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * dated June, 1991.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

import { Action, IFullActionControl, StatefulModel } from 'kombo';
import { Observable, of as rxOf, forkJoin } from 'rxjs';
import { tap, map } from 'rxjs/operators';
import { Color, List } from 'cnc-tskit';

import { MultiDict } from '../../multidict';
import { Kontext } from '../../types/common';
import { PluginInterfaces } from '../../types/plugins';
import { AjaxResponse } from '../../types/ajaxResponses';
import { PageModel } from '../../app/page';
import { ConcLineModel } from './lines';
import { AudioPlayer } from './media';
import { Actions as ViewOptionsActions, ActionName as ViewOptionsActionName } from '../options/actions';
import { Actions as MainMenuActions } from '../mainMenu/actions';
import { Actions, ActionName } from './actions';
import { DetailExpandPositions } from './common';

/**
 *
 */
export type ConcDetailText = Array<{str:string; class:string}>;


/**
 *
 */
export interface Speech {
    text:ConcDetailText;
    speakerId:string;
    segments:Array<string>;
    colorCode:Kontext.RGBAColor;
    metadata:{[ident:string]:string};
}

/**
 * Note: A single speech line contains an array of
 * simultaneous speeches (i.e. if two people speak
 * at the same time then the array contains two items).
 */
export type SpeechLine = Array<Speech>;

export type SpeechLines = Array<SpeechLine>;


type ExpandArgs = [number, number];


export interface SpeechOptions {
    speakerIdAttr:[string, string];
    speechSegment:[string, string];
    speechAttrs:Array<string>;
    speechOverlapAttr:[string, string];
    speechOverlapVal:string;
}

export interface ConcDetailModelState {

    concDetail:ConcDetailText;

    expandLeftArgs:Array<ExpandArgs>;

    expandRightArgs:Array<ExpandArgs>;

    corpusId:string;

    kwicTokenNum:number;

    tokenConnectData:PluginInterfaces.TokenConnect.TCData;

    kwicLength:number;

    lineIdx:number;

    wholeDocumentLoaded:boolean;

    structCtx:string;

    speechOpts:SpeechOptions;

    speechAttrs:Array<string>;


    playingRowIdx:number;

    speakerColors:Array<Kontext.RGBAColor>;

    wideCtxGlobals:Array<[string, string]>;

    spkOverlapMode:string;

    /**
     * Either 'default' or 'speech'.
     * An initial mode is inferred from speechOpts
     * (see constructor).
     */
    mode:string;

    /**
     * Speaker colors attachments must survive context expansion.
     * Otherwise it would confusing if e.g. green speaker '01'
     * changed into red one after a context expasion due to
     * some new incoming or outcoming users.
     */
    speakerColorsAttachments:{[ident:string]:Kontext.RGBAColor};

    isBusy:boolean;

    tokenConnectIsBusy:boolean;

    /**
     * Currently expanded side. In case the model is not busy the
     * value represent last expanded side (it is not reset after expansion).
     * Values: 'left', 'right' or a custom value generated by TC plugin
     */
    expaningSide:DetailExpandPositions;
}

/**
 * A model providing access to a detailed/extended kwic information.
 */
export class ConcDetailModel extends StatefulModel<ConcDetailModelState> {

    private static SPK_LABEL_OPACITY:number = 0.8;

    private static ATTR_NAME_ALLOWED_CHARS:string = 'a-zA-Z0-9_';

    private static SPK_OVERLAP_MODE_FULL:string = 'full';

    private static SPK_OVERLAP_MODE_SIMPLE:string = 'simple';

    private readonly layoutModel:PageModel;

    private readonly linesModel:ConcLineModel;

    private readonly audioPlayer:AudioPlayer;

    private readonly tokenConnectPlg:PluginInterfaces.TokenConnect.IPlugin;


    constructor(layoutModel:PageModel, dispatcher:IFullActionControl, linesModel:ConcLineModel, structCtx:string,
            speechOpts:SpeechOptions, speakerColors:Array<string>, wideCtxGlobals:Array<[string, string]>,
            tokenConnectPlg:PluginInterfaces.TokenConnect.IPlugin) {
        super(
            dispatcher,
            {
                structCtx: structCtx,
                speechOpts: speechOpts,
                mode: speechOpts.speakerIdAttr ? 'speech' : 'default',
                speechAttrs: speechOpts.speechAttrs,
                wideCtxGlobals: wideCtxGlobals,
                lineIdx: null,
                playingRowIdx: -1,
                wholeDocumentLoaded: false,
                speakerColors: List.map(
                    item => Color.importColor(ConcDetailModel.SPK_LABEL_OPACITY, item),
                    speakerColors
                ),
                speakerColorsAttachments: {},
                spkOverlapMode: (speechOpts.speechOverlapAttr || [])[1] ?
                        ConcDetailModel.SPK_OVERLAP_MODE_FULL : ConcDetailModel.SPK_OVERLAP_MODE_SIMPLE,
                expandLeftArgs: [],
                expandRightArgs: [],
                tokenConnectData: {
                    token: null,
                    renders: []
                },
                concDetail: null,
                isBusy: false,
                tokenConnectIsBusy: false,
                corpusId: layoutModel.getCorpusIdent().id,
                expaningSide: 'left',
                kwicLength: 1,
                kwicTokenNum: -1
            }
        );
        this.layoutModel = layoutModel;
        this.linesModel = linesModel;
        this.tokenConnectPlg = tokenConnectPlg;
        this.audioPlayer = new AudioPlayer(
            this.layoutModel.createStaticUrl('misc/soundmanager2/'),
            () => {
                this.emitChange();
            },
            () => {
                this.state.playingRowIdx = -1;
                this.emitChange();
            },
            () => {
                this.state.playingRowIdx = -1;
                this.audioPlayer.stop();
                this.emitChange();
                this.layoutModel.showMessage('error',
                        this.layoutModel.translate('concview__failed_to_play_audio'));
            }
        );

        this.addActionHandler<Actions.ExpandKwicDetail>(
            ActionName.ExpandKwicDetail,
            action => {
                this.state.expaningSide = action.payload.position;
                this.state.isBusy = true;
                this.emitChange();
                this.loadConcDetail(
                        this.state.corpusId,
                        this.state.kwicTokenNum,
                        this.state.kwicLength,
                        this.state.lineIdx,
                        [],
                        action.payload['position']
                ).subscribe(
                    () => {
                        this.state.isBusy = false;
                        this.linesModel.setLineFocus(this.state.lineIdx, true);
                        this.linesModel.emitChange();
                        this.emitChange();
                    },
                    (err) => {
                        this.state.isBusy = false;
                        this.emitChange();
                        this.layoutModel.showMessage('error', err);
                    }
                );
            }
        );

        this.addActionHandler<Actions.ShowKwicDetail>(
            ActionName.ShowKwicDetail,
            action => {
                this.state.isBusy = true;
                this.state.tokenConnectIsBusy = true;
                this.state.expandLeftArgs = Array<ExpandArgs>();
                this.state.expandRightArgs = Array<ExpandArgs>();
                forkJoin(
                    this.loadConcDetail(
                        action.payload.corpusId,
                        action.payload.tokenNumber,
                        action.payload.kwicLength,
                        action.payload.lineIdx,
                        [],
                        this.state.expandLeftArgs.length > 1 && this.state.expandRightArgs.length > 1 ? 'reload' : null
                    ),
                    this.loadTokenConnect(
                        action.payload.corpusId,
                        action.payload.tokenNumber,
                        action.payload.kwicLength,
                        action.payload.lineIdx
                    )

                ).subscribe(
                    () => {
                        this.state.isBusy = false;
                        this.state.tokenConnectIsBusy = false;
                        this.linesModel.setLineFocus(action.payload['lineIdx'], true);
                        this.linesModel.emitChange();
                        this.emitChange();
                    },
                    (err) => {
                        this.state.isBusy = false;
                        this.state.tokenConnectIsBusy = false;
                        this.emitChange();
                        this.layoutModel.showMessage('error', err);
                    }
                );
            }
        );

        this.addActionHandler<Actions.ShowTokenDetail>(
            ActionName.ShowTokenDetail,
            action => {
                this.resetKwicDetail();
                this.resetTokenConnect();
                this.state.tokenConnectIsBusy = true;
                this.emitChange();
                this.loadTokenConnect(
                    action.payload.corpusId,
                    action.payload.tokenNumber,
                    1,
                    action.payload.lineIdx

                ).subscribe(
                    () => {
                        this.state.tokenConnectIsBusy = false;
                        this.emitChange();
                    },
                    (err) => {
                        this.emitChange();
                        this.state.tokenConnectIsBusy = false;
                        this.layoutModel.showMessage('error', err);
                    }
                );

            }
        );

        this.addActionHandler<Actions.ShowWholeDocument>(
            ActionName.ShowWholeDocument,
            action => {
                this.loadWholeDocument().subscribe(
                    () => {
                        this.emitChange();
                    },
                    (err) => {
                        this.layoutModel.showMessage('error', err);
                    }
                );
            }
        );

        this.addActionHandler<Actions.ShowSpeechDetail>(
            ActionName.ShowSpeechDetail,
            action => {
                this.state.mode = 'speech';
                this.state.expandLeftArgs = [];
                this.state.expandRightArgs = [];
                this.state.speakerColorsAttachments = {};
                this.state.isBusy = true;
                this.emitChange();
                this.loadSpeechDetail(
                        action.payload.corpusId,
                        action.payload.tokenNumber,
                        action.payload.kwicLength,
                        action.payload.lineIdx,
                        this.state.expandLeftArgs.length > 1 && this.state.expandRightArgs.length > 1 ? 'reload' : null).subscribe(
                    () => {
                        this.state.isBusy = false;
                        this.linesModel.setLineFocus(action.payload['lineIdx'], true);
                        this.linesModel.emitChange();
                        this.emitChange();
                    },
                    (err) => {
                        this.state.isBusy = false;
                        this.emitChange();
                        this.layoutModel.showMessage('error', err);
                    }
                );
            }
        );

        this.addActionHandler<Actions.ExpandSpeechDetail>(
            ActionName.ExpandSpeechDetail,
            action => {
                this.state.expaningSide = action.payload.position;
                this.state.isBusy = true;
                this.emitChange();
                this.loadSpeechDetail(
                        this.state.corpusId,
                        this.state.kwicTokenNum,
                        this.state.kwicLength,
                        this.state.lineIdx,
                        action.payload['position']).subscribe(
                    () => {
                        this.state.isBusy = false;
                        this.linesModel.setLineFocus(this.state.lineIdx, true);
                        this.linesModel.emitChange();
                        this.emitChange();
                    },
                    (err) => {
                        this.state.isBusy = false;
                        this.layoutModel.showMessage('error', err);
                    }
                );
            }
        );

        this.addActionHandler<Actions.DetailSwitchMode>(
            ActionName.DetailSwitchMode,
            action => {
                (() => {
                    if (action.payload.value === 'default') {
                        this.state.mode = 'default';
                        this.state.expandLeftArgs = Array<ExpandArgs>();
                        this.state.expandRightArgs = Array<ExpandArgs>();
                        this.state.expaningSide = null;
                        this.state.concDetail = null;
                        this.state.isBusy = true;
                        this.emitChange();
                        return this.reloadConcDetail();

                    } else if (action.payload['value'] === 'speech') {
                        this.state.mode = 'speech';
                        this.state.expandLeftArgs = [];
                        this.state.expandRightArgs = [];
                        this.state.speakerColorsAttachments = {};
                        this.state.expaningSide = null;
                        this.state.concDetail = null;
                        this.state.isBusy = true;
                        this.emitChange();
                        return this.reloadSpeechDetail();

                    } else {
                        this.state.mode = action.payload.value;
                        this.state.expandLeftArgs = [];
                        this.state.expandRightArgs = [];
                        this.state.expaningSide = null;
                        this.state.concDetail = null;
                        this.state.isBusy = true;
                        this.emitChange();
                        return rxOf(null);
                    }
                })().subscribe(
                    () => {
                        this.state.isBusy = false;
                        this.emitChange();
                    },
                    (err) => {
                        this.state.isBusy = false;
                        this.layoutModel.showMessage('error', err);
                        this.emitChange();
                    }
                );
            }
        );

        this.addActionHandler<Actions.ResetDetail>(
            [
                ActionName.ResetDetail,
                ActionName.ShowRefDetail
            ],
            action => {
                this.resetKwicDetail();
                this.resetTokenConnect();
                this.emitChange();
                this.linesModel.emitChange();
            }
        );

        this.addActionHandler<Actions.PlaySpeech>(
            ActionName.PlaySpeech,
            action => {
                if (this.state.playingRowIdx > -1) {
                    this.state.playingRowIdx = null;
                    this.audioPlayer.stop();
                    this.emitChange();
                }
                this.state.playingRowIdx = action.payload.rowIdx;
                const itemsToPlay = List.map(
                        item => this.layoutModel.createActionUrl(`audio?corpname=${this.corpusId}&chunk=${item}`),
                        action.payload.segments
                );
                if (itemsToPlay.length > 0) {
                    this.audioPlayer.start(itemsToPlay);

                } else {
                    this.state.playingRowIdx = -1;
                    this.layoutModel.showMessage('error', this.layoutModel.translate('concview__nothing_to_play'));
                    this.emitChange();
                }
            }
        );

        this.addActionHandler<Actions.StopSpeech>(
            ActionName.StopSpeech,
            action => {
                if (this.state.playingRowIdx > -1) {
                    this.state.playingRowIdx = null;
                    this.audioPlayer.stop();
                    this.emitChange();
                }
            }
        );

        this.addActionHandler<ViewOptionsActions.SaveSettingsDone>(
            ViewOptionsActionName.SaveSettingsDone,
            action => {
                this.state.wideCtxGlobals = action.payload.widectxGlobals;
                this.emitChange();
            }
        );
    }

    private resetKwicDetail():void {
        if (this.state.lineIdx !== null) {
            this.linesModel.setLineFocus(this.state.lineIdx, false);
            this.state.lineIdx = null;
            this.state.corpusId = null;
            this.state.kwicTokenNum = null;
            this.state.kwicLength = null;
            this.state.wholeDocumentLoaded = false;
            this.state.expandLeftArgs = [];
            this.state.expandRightArgs = [];
            this.state.speakerColorsAttachments = {};
            this.state.concDetail = null;
        }
    }

    private resetTokenConnect():void {
        this.state.tokenConnectData = {
            token: null,
            renders: []
        };
    }

    getSpeechesDetail():SpeechLines {

        const parseTag = (name:string, s:string):{[key:string]:string} => {
            const srch = new RegExp(`<${name}(\\s+[^>]+)>`).exec(s);
            if (srch) {
                const ans:{[key:string]:string} = {};
                const items = srch[1].trim()
                    .split(new RegExp(`([${ConcDetailModel.ATTR_NAME_ALLOWED_CHARS}]+)=`)).slice(1);
                for (let i = 0; i < items.length; i += 2) {
                        ans[items[i]] = (items[i+1] || '').trim();
                }
                return ans;
            }
            return null;
        };

        const createNewSpeech = (speakerId:string, colorCode:Kontext.RGBAColor, metadata:{[attr:string]:string}):Speech => {
            const importedMetadata = Immutable.Map<string, string>(metadata)
                    .filter((val, attr) => attr !== this.speechOpts.speechSegment[1] &&
                                attr !== this.speechOpts.speakerIdAttr[1])
                    .toMap();
            return {
                text: [],
                speakerId: speakerId,
                segments: Array<string>(),
                metadata: importedMetadata,
                colorCode: colorCode
            };
        };

        const isOverlap = (s1:Speech, s2:Speech):boolean => {
            if (s1 && s2 && this.spkOverlapMode === ConcDetailModel.SPK_OVERLAP_MODE_FULL) {
                const flag1 = s1.metadata.get(this.speechOpts.speechOverlapAttr[1]);
                const flag2 = s2.metadata.get(this.speechOpts.speechOverlapAttr[1]);
                if (flag1 === flag2
                        && flag2 === this.speechOpts.speechOverlapVal
                        && s1.segments.get(0) === s2.segments.get(0)) {
                    return true;
                }
            }
            return false;
        };

        const mergeOverlaps = (speeches:Array<Speech>):SpeechLines => {
            const ans:SpeechLines = [];
            let prevSpeech:Speech = null;
            speeches.forEach((item, i) => {
                if (isOverlap(prevSpeech, item)) {
                    ans[ans.length - 1].push(item);
                    ans[ans.length - 1] = ans[ans.length - 1].sort((s1, s2) => {
                        if (s1.speakerId > s2.speakerId) {
                            return 1;

                        } else if (s1.speakerId < s2.speakerId) {
                            return -1;

                        } else {
                            return 0;
                        }
                    });

                } else {
                    ans.push([item]);
                }
                prevSpeech = item;
            });
            return ans;
        };

        let currSpeech:Speech = createNewSpeech('\u2026', null, {});
        let prevSpeech:Speech = null;
        const tmp:Array<Speech> = [];

        (this.state.concDetail || []).forEach((item, i) => {
            if (item.class === 'strc') {
                const attrs = parseTag(this.state.speechOpts.speakerIdAttr[0], item.str);
                if (attrs !== null && attrs[this.state.speechOpts.speakerIdAttr[1]]) {
                        tmp.push(currSpeech);
                        const newSpeakerId = attrs[this.state.speechOpts.speakerIdAttr[1]];
                        if (!this.state.speakerColorsAttachments.has(newSpeakerId)) {
                            this.state.speakerColorsAttachments = this.state.speakerColorsAttachments.set(
                                newSpeakerId, this.state.speakerColors.get(this.state.speakerColorsAttachments.size)
                            )
                        }
                        prevSpeech = currSpeech;
                        currSpeech = createNewSpeech(
                            newSpeakerId,
                            this.state.speakerColorsAttachments.get(newSpeakerId),
                            attrs
                        );
                }
                if (item.str.indexOf(`<${this.state.speechOpts.speechSegment[0]}`) > -1) {
                    const attrs = parseTag(this.state.speechOpts.speechSegment[0], item.str);
                    if (attrs) {
                        currSpeech.segments = currSpeech.segments.push(attrs[this.state.speechOpts.speechSegment[1]]);
                    }

                }
                if (this.state.spkOverlapMode === ConcDetailModel.SPK_OVERLAP_MODE_SIMPLE) {
                    const overlapSrch = new RegExp(`</?(${this.state.speechOpts.speechOverlapAttr[0]})(>|[^>]+>)`, 'g');
                    let srch;
                    let i = 0;
                    while ((srch = overlapSrch.exec(item.str)) !== null) {
                        if (srch[0].indexOf('</') === 0
                                && item.str.indexOf(`<${this.state.speechOpts.speakerIdAttr[0]}`) > 0) {
                            prevSpeech.text.push({str: srch[0], class: item.class});

                        } else {
                            currSpeech.text.push({str: srch[0], class: item.class});
                        }
                        i += 1;
                    }
                }

            } else {
                currSpeech.text.push({
                    str: item.str,
                    class: item.class
                });
            }
        });
        if (currSpeech.text.length > 0) {
            tmp.push(currSpeech);
        }
        return mergeOverlaps(tmp);
    }

    /**
     *
     */
    private loadWholeDocument():Observable<any> {

        return this.layoutModel.ajax$<AjaxResponse.WideCtx>(
            'GET',
            this.layoutModel.createActionUrl('structctx'),
            {
                corpname: this.state.corpusId,
                pos: this.state.kwicTokenNum,
                struct: this.state.structCtx
            },
            {}

        ).pipe(
            tap(
                (data) => {
                    this.state.concDetail = data.content;
                    this.state.wholeDocumentLoaded = true;
                    this.state.expandLeftArgs = Array<ExpandArgs>();
                    this.state.expandRightArgs = Array<ExpandArgs>();
                }
            )
        );
    }

    /**
     *
     */
    private loadSpeechDetail(corpusId:string, tokenNum:number, kwicLength:number, lineIdx:number, expand?:string):Observable<boolean> {
        const structs = this.layoutModel.getConcArgs().getList('structs');
        const args = this.state.speechAttrs
                .map(x => `${this.state.speechOpts.speakerIdAttr[0]}.${x}`)
                .concat([this.state.speechOpts.speechSegment.join('.')]);

        const [overlapStruct, overlapAttr] = (this.state.speechOpts.speechOverlapAttr || [undefined, undefined]);
        if (overlapStruct !== this.state.speechOpts.speakerIdAttr[0]
                && structs.indexOf(overlapStruct) === -1) {
            if (overlapStruct && overlapAttr) {
                args.push(`${overlapStruct}.${overlapAttr}`);

            } else if (overlapStruct) {
                args.push(overlapStruct);
            }
        }
        return this.loadConcDetail(corpusId, tokenNum, kwicLength, lineIdx, args, expand);
    }

    private reloadSpeechDetail():Observable<boolean> {
        return this.loadSpeechDetail(this.state.corpusId, this.state.kwicTokenNum, this.state.kwicLength, this.state.lineIdx);
    }

    private loadTokenConnect(corpusId:string, tokenNum:number, numTokens:number, lineIdx:number):Observable<boolean> {
        return (() => {
            if (this.tokenConnectPlg) {
                return this.tokenConnectPlg.fetchTokenConnect(corpusId, tokenNum, numTokens);

            } else {
                return rxOf<PluginInterfaces.TokenConnect.TCData>(null);
            }
        })().pipe(
            tap(
                (data) => {
                    if (data) {
                        this.state.tokenConnectData = {
                            token: data.token,
                            renders: data.renders
                        };
                        this.state.lineIdx = lineIdx;
                    }
                }
            ),
            map(
                (data) => data ? true : false
            )
        );
    }

    /**
     *
     */
    private loadConcDetail(corpusId:string, tokenNum:number, kwicLength:number, lineIdx:number, structs:Array<string>,
                expand?:string):Observable<boolean> {
        this.state.corpusId = corpusId;
        this.state.kwicTokenNum = tokenNum;
        this.state.kwicLength = kwicLength;
        this.state.lineIdx = lineIdx;
        this.state.wholeDocumentLoaded = false;

        const args = new MultiDict(this.state.wideCtxGlobals);
        args.set('corpname', corpusId); // just for sure (is should be already in args)
        // we must delete 'usesubcorp' as the server API does not need it
        // and in case of an aligned corpus it even produces an error
        args.remove('usesubcorp');
        args.set('pos', String(tokenNum));
        args.set('format', 'json');
        if (this.state.kwicLength && this.state.kwicLength > 1) {
            args.set('hitlen', this.state.kwicLength);
        }

        if (structs) {
            args.set('structs', (args.head('structs') || '').split(',').concat(structs).join(','));
        }

        if (expand === 'left') {
            args.set('detail_left_ctx', String(this.state.expandLeftArgs.get(-1)[0]));
            args.set('detail_right_ctx', String(this.state.expandLeftArgs.get(-1)[1]));

        } else if (expand === 'right') {
            args.set('detail_left_ctx', String(this.state.expandRightArgs.get(-1)[0]));
            args.set('detail_right_ctx', String(this.state.expandRightArgs.get(-1)[1]));


        } else if (expand === 'reload' && this.state.expandLeftArgs.size > 1
                && this.state.expandRightArgs.size > 1) {
            // Please note that the following lines do not contain any 'left - right'
            // mismatch as we have to fetch the 'current' state, not the 'next' one and such
            // info is always on the other side of expansion (expand-left contains
            // also current right and vice versa)
            args.set('detail_left_ctx', String(this.state.expandRightArgs.get(-1)[0]));
            args.set('detail_right_ctx', String(this.state.expandLeftArgs.get(-1)[1]));
        }

        this.isBusy = true;
        this.emitChange();

        return this.layoutModel.ajax$<AjaxResponse.WideCtx>(
            'GET',
            this.layoutModel.createActionUrl('widectx'),
            args,
            {}

        ).pipe(
            tap(
                (data) => {
                    this.state.concDetail = data.content;
                    if (data.expand_left_args) {
                        this.state.expandLeftArgs = this.state.expandLeftArgs.push([
                            data.expand_left_args.detail_left_ctx, data.expand_left_args.detail_right_ctx
                        ]);

                    } else {
                        this.state.expandLeftArgs = this.state.expandLeftArgs.push(null);
                    }
                    if (data.expand_right_args) {
                        this.state.expandRightArgs = this.state.expandRightArgs.push([
                            data.expand_right_args.detail_left_ctx, data.expand_right_args.detail_right_ctx
                        ]);

                    } else {
                        this.state.expandRightArgs = this.state.expandRightArgs.push(null);
                    }
                }
            ),
            map(d =>  !!d)
        );
    }

    private reloadConcDetail():Observable<boolean> {
        return this.loadConcDetail(this.state.corpusId, this.state.kwicTokenNum, this.state.kwicLength, this.state.lineIdx, [], 'reload');
    }

    hasExpandLeft():boolean {
        return !!this.state.expandLeftArgs.get(-1);
    }

    hasExpandRight():boolean {
        return !!this.state.expandRightArgs.get(-1);
    }

    canDisplayWholeDocument():boolean {
        return this.state.structCtx && !this.state.wholeDocumentLoaded;
    }

    supportsTokenConnect():boolean {
        return this.tokenConnectPlg  ? this.tokenConnectPlg.providesAnyTokenInfo() : false;
    }

    supportsSpeechView():boolean {
        return !!this.state.speechOpts.speakerIdAttr;
    }
}

