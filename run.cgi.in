#!@pythonpath@
# -*- Python -*-

import cgitb; cgitb.enable()

import sys, os

#if '/usr/local/lib64/python2.6/site-packages' not in sys.path:
#    sys.path.insert (0, '/usr/local/lib64/python2.6/site-packages')

if '/opt/noske/lib64/python2.6/site-packages' not in sys.path:
    sys.path.insert (0, '/opt/noske/lib64/python2.6/site-packages')

if '/opt/noske/lib64/python2.6/site-packages/bonito2' not in sys.path:
    sys.path.insert (0, '/opt/noske/lib64/python2.6/site-packages/bonito2')

MANATEE_REGISTRY = '/home/manatee/registry'

# configuration
import ConfigParser
config = ConfigParser.ConfigParser()
config.read('config.ini')

# logging setup
import logging
logger = logging.getLogger('') # root logger
hdlr = logging.FileHandler(config.get('logging', 'log_path'))
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr)
logger.setLevel(logging.INFO)

from conccgi import ConcCGI
from usercgi import UserCGI

import manatee

try:
    from wseval import WSEval
except:
    class WSEval(ConcCGI):
        pass

def get_corplist (user, config):
    import MySQLdb
    
    #if not os.environ.has_key ('MANATEE_REGISTRY'):
    #    os.environ['MANATEE_REGISTRY'] = MANATEE_REGISTRY

    conn = MySQLdb.connect (host=config.get('database', 'host'), user=config.get('database', 'username'),
        passwd=config.get('database', 'password'), db=config.get('database', 'name'))
    cursor = conn.cursor ()
    cursor.execute ("SELECT corplist, sketches FROM user WHERE user LIKE '%s'" % user)
    row = cursor.fetchone()
    
    if row[1] == 1:
	os.environ['MANATEE_REGISTRY'] = MANATEE_REGISTRY
    else:
	os.environ['MANATEE_REGISTRY'] = '%s/no_sketches' % MANATEE_REGISTRY
    
    c = row[0].split()
    corpus = []

    for i in c:
        if i[0] == '@':
            i = i[1:len(i)]
            cursor.execute("SELECT corpora.name FROM corplist,relation,corpora WHERE corplist.id=relation.corplist AND relation.corpora=corpora.id AND corplist.name='" + i + "'")
            row = cursor.fetchall()

            for y in row:
                corpus.append(y[0])

        else:
            corpus.append(i)


    cursor.close()
    conn.close()
    path_info =  os.getenv('PATH_INFO')

    if path_info == '/wsketch_form' or path_info == '/wsketch' or path_info == '/thes_form' or path_info == '/thes' or path_info == '/wsdiff_form' or path_info == '/wsdiff':
        r = []
        for ws in range(len(corpus)):
            c = manatee.Corpus(corpus[ws]).get_conf('WSBASE')
            if c == 'none':
                r.append(corpus[ws])
    
        for x in r:
    		corpus.remove(x)

    corpus.sort()
    return corpus


class BonitoCGI (WSEval, UserCGI):

    # UserCGI options
    _options_dir = '@datapath@/options'

    # ConcCGI options
    cache_dir = '@datapath@/cache'
    subcpath = ['@datapath@/subcorp/GLOBAL']
    gdexpath = [] # [('confname', '/path/to/gdex.conf'), ...]

    # set available corpora, e.g.: corplist = ['susanne', 'bnc', 'biwec']
    #corplist = ['susanne']
    corplist = get_corplist (os.getenv('REMOTE_USER'), config)
    # set default corpus
    if 'syn2010' in corplist:
	corpname = 'syn2010'
    else:
        corpname = 'omezeni/syn2010'

    helpsite = 'https://trac.sketchengine.co.uk/wiki/SkE/Help/PageSpecificHelp/'

    def __init__ (self, user=None):
        UserCGI.__init__ (self, user)
        ConcCGI.__init__ (self)

    def _user_defaults (self, user):
        if user is not self._default_user:
            self.subcpath.append ('@datapath@/subcorp/%s' % user)
        self._conc_dir = '@datapath@/conc/%s' % user
        self._wseval_dir = '@datapath@/wseval/%s' % user


if __name__ == '__main__':
    #if not os.environ.has_key ('MANATEE_REGISTRY'):
    #    os.environ['MANATEE_REGISTRY'] = '@MANATEE_REGISTRY@'
    if ";prof=" in os.environ['REQUEST_URI'] or "&prof=" in os.environ['REQUEST_URI']:
        import cProfile, pstats, tempfile
        proffile = tempfile.NamedTemporaryFile()
        cProfile.run('''BonitoCGI().run_unprotected (selectorname="corpname",
                        outf=open(os.devnull, "w"))''', proffile.name)
        profstats = pstats.Stats(proffile.name)
        print "<pre>"
        profstats.sort_stats('time','calls').print_stats(50)
        profstats.sort_stats('cumulative').print_stats(50)
        print "</pre>"
    else:
        BonitoCGI().run_unprotected (selectorname='corpname')
